{
  "version": 3,
  "file": "bundle.css",
  "sources": [
    "../App.svelte",
    "../Field.svelte",
    "../List.svelte",
    "../Empty.svelte",
    "../Item.svelte",
    "../Button.svelte"
  ],
  "sourcesContent": [
    "<script>\n  import { provideStoreon } from '@storeon/svelte';\n\n  import Field from './components/Field.svelte';\n  import List from './components/List.svelte';\n\n  export let store;\n\n  provideStoreon(store);\n</script>\n\n<style>\n  .main {\n    max-width: 700px;\n    margin: 0 auto;\n  }\n</style>\n\n<main class=\"main\">\n  <h1>Todo</h1>\n  <Field />\n  <List />\n</main>\n",
    "<script>\n  import { useStoreon } from '@storeon/svelte';\n\n  let value = '';\n\n  const { dispatch } = useStoreon();\n\n  const addItem = ({ keyCode }) => {\n    if (keyCode === 13 && value.trim() !== '') {\n      dispatch('items/add', value);\n      value = '';\n    }\n  };\n</script>\n\n<input\n  type=\"text\"\n  class=\"field\"\n  bind:value={value}\n  on:keypress={addItem}\n/>\n\n<style>\n  .field {\n    width: 100%;\n  }\n</style>\n",
    "<script>\n  import { useStoreon } from '@storeon/svelte';\n\n  import Empty from './Empty.svelte';\n  import Item from './Item.svelte';\n\n  const { items, dispatch } = useStoreon('items');\n</script>\n\n<ul class=\"list\">\n{#if $items.length > 0}\n  {#each $items as data (data.id)}\n    <Item\n      {data}\n      {dispatch}\n    />\n  {/each}\n{:else}\n  <Empty />\n{/if}\n</ul>\n\n<style>\n  .list {\n    list-style: none;\n    padding: 0;\n    margin: 16px 0;\n  }\n</style>\n",
    "<p class=\"empty\">You don't have any tasks</p>\n\n<style>\n  .empty {\n    padding: 0;\n    margin: 16px 0;\n    text-align: center;\n    color: rgba(0, 0, 0, 0.6)\n  }\n</style>\n",
    "<script>\n  import Button from './Button.svelte';\n\n  export let data;\n  export let dispatch;\n\n  const editItem = () => {\n    dispatch('items/openEdit', data.id);\n  };\n\n  const closeEdit = () => {\n    dispatch('items/closeEdit', data.id);\n  };\n\n  const removeItem = () => {\n    dispatch('items/remove', data.id);\n  };\n\n  const updateItem = ({ keyCode, target }) => {\n    if (keyCode === 13 && target.value.trim() !== '') {\n      dispatch('items/update', { id: data.id, text: target.value });\n    }\n  };\n\n  const setFocuse = (input) => {\n    input.focus();\n  };\n</script>\n\n<li class=\"item\">\n{#if data.isEdit}\n  <input\n    type=\"text\"\n    class=\"edit\"\n    value={data.text}\n    on:keypress={updateItem}\n    on:blur={closeEdit}\n    use:setFocuse\n  />\n  <Button>\n    Close\n  </Button>\n{:else}\n  <span>\n    {data.text}\n  </span>\n  <div>\n    <Button onClick={editItem}>\n    edit\n    </Button>\n    <Button onClick={removeItem}>\n      remove\n    </Button>\n  </div>\n{/if}\n</li>\n\n<style>\n  .item {\n    display: flex;\n    justify-content: space-between;\n    align-items: center;\n    background-color: rgba(0, 0, 0, 0.05);\n    padding: 5px 15px;\n    margin: 5px 0;\n  }\n\n  .edit {\n    width: 100%;\n    margin-right: 5px;\n  }\n</style>\n",
    "<script>\n  export let onClick;\n</script>\n\n<button\n  type=\"button\"\n  class=\"btn\"\n  on:click={onClick}\n>\n  <slot />\n</button>\n\n<style>\n  .btn {\n    cursor: pointer;\n  }\n</style>\n"
  ],
  "names": [],
  "mappings": "AAYE,KAAK,cAAC,CAAC,AACL,SAAS,CAAE,KAAK,CAChB,MAAM,CAAE,CAAC,CAAC,IAAI,AAChB,CAAC;ACQD,MAAM,cAAC,CAAC,AACN,KAAK,CAAE,IAAI,AACb,CAAC;ACFD,KAAK,cAAC,CAAC,AACL,UAAU,CAAE,IAAI,CAChB,OAAO,CAAE,CAAC,CACV,MAAM,CAAE,IAAI,CAAC,CAAC,AAChB,CAAC;ACxBD,MAAM,eAAC,CAAC,AACN,OAAO,CAAE,CAAC,CACV,MAAM,CAAE,IAAI,CAAC,CAAC,CACd,UAAU,CAAE,MAAM,CAClB,KAAK,CAAE,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC;EAC3B,CAAC;ACkDD,KAAK,cAAC,CAAC,AACL,OAAO,CAAE,IAAI,CACb,eAAe,CAAE,aAAa,CAC9B,WAAW,CAAE,MAAM,CACnB,gBAAgB,CAAE,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,CACrC,OAAO,CAAE,GAAG,CAAC,IAAI,CACjB,MAAM,CAAE,GAAG,CAAC,CAAC,AACf,CAAC,AAED,KAAK,cAAC,CAAC,AACL,KAAK,CAAE,IAAI,CACX,YAAY,CAAE,GAAG,AACnB,CAAC;ACzDD,IAAI,cAAC,CAAC,AACJ,MAAM,CAAE,OAAO,AACjB,CAAC"
}